1. PIPE (|)

    Description: Passes the output of one command as the input to another command.
    Example: ls | grep "file" (outputs the list of files, then filters it with grep).
    Implementation Tip: You'll need to use pipe(), fork(), dup2(), and exec() system calls to handle pipes.

2. REDIRECTION OPERATORS

    Input Redirection (<):
        Description: Redirects input from a file to a command.
        Example: sort < file.txt (sorts the contents of file.txt).
        Implementation Tip: Use open(), dup2(), and close() system calls to redirect stdin.
    Output Redirection (>):
        Description: Redirects the output of a command to a file (overwrites the file).
        Example: ls > output.txt (writes the output of ls to output.txt).
        Implementation Tip: Use open(), dup2(), and close() to redirect stdout.
    Append Output (>>):
        Description: Appends the output of a command to the end of a file.
        Example: echo "hello" >> file.txt (appends "hello" to file.txt).
        Implementation Tip: Similar to >, but open the file in append mode.
	Here Document (<<):
		Example: cat <<'X' > t.txt		contentbla X

3. LOGICAL OPERATORS

    Logical AND (&&):
        Description: Executes the second command only if the first command succeeds (returns 0).
        Example: make && ./program (runs ./program only if make succeeds).
        Implementation Tip: You'll need to check the exit status of the first command using wait() or similar functions.
    Logical OR (||):
        Description: Executes the second command only if the first command fails (non-zero return).
        Example: make || echo "Build failed" (echoes "Build failed" only if make fails).
        Implementation Tip: Again, use the exit status of the first command to decide whether to execute the second command.

4. BACGROUND EEXECUTION (&)

    Description: Runs a command in the background.
    Example: sleep 60 & (runs the sleep command in the background).
    Implementation Tip: Use fork() to create a child process and have the parent process immediately return to the prompt without waiting for the child to finish.

5. SUBSHELLS AND COMMAND GROUPING ((), {})

    Subshell (()):
        Description: Runs commands in a subshell, allowing you to group commands together.
        Example: (cd /tmp && ls) (changes directory and lists files within a subshell).
        Implementation Tip: Use fork() to create a subshell.
    Command Grouping ({}):
        Description: Groups commands to be executed together in the current shell.
        Example: { cd /tmp; ls; } (changes directory and lists files in the current shell).
        Implementation Tip: This doesn't require a subshell but needs careful parsing to handle correctly.

6. SEMICOLON (;)

    Description: Separates multiple commands to be executed sequentially, regardless of the success or failure of each command.
    Example: cd /tmp; ls; echo "Done" (runs all commands in sequence).
    Implementation Tip: Simply execute each command in sequence.

7. REDIRECTION OF STDERR (2>, 2>&1)

    Redirect STDERR (2>):
        Description: Redirects the standard error (stderr) output to a file.
        Example: command 2> error.log (writes stderr to error.log).
    Redirect STDERR to STDOUT (2>&1):
        Description: Combines stderr and stdout.
        Example: command > output.log 2>&1 (redirects both stdout and stderr to output.log).
    Implementation Tip: Use dup2() to redirect file descriptors.

8. NoHUP (nohup)

    Description: Runs a command immune to hangups, with output sent to nohup.out by default.
    Example: nohup command & (runs command in the background, immune to terminal hangups).
    Implementation Tip: Handle signal blocking and output redirection.

9. TILDE (~) EXPANSION

    Description: Expands ~ to the user's home directory.
    Example: cd ~ (changes to the home directory).
    Implementation Tip: You can use the getenv("HOME") function to handle tilde expansion.

10. CONDITIONAL EXECUTION (? : or similar)

    Description: Execute conditional logic, similar to ternary operators in C.
    Example: (command && echo "Success") || echo "Failure" (runs based on success or failure of the command).
    Implementation Tip: Combine logical AND/OR with conditional checks.

11. WILDCARD EXPANSION (*, ?, [])

    Description: Wildcards for matching filenames or patterns.
    Example: ls *.txt (lists all .txt files).
    Implementation Tip: Use glob() or similar functions to expand wildcards.

PARSING AND EXSECUTION

    Parsing: Implementing a robust parser is crucial. It should correctly handle quotes, escape characters, and multiple operators.
    Execution: Use system calls like fork(), execvp(), wait(), dup2(), and pipe() for execution, redirection, and piping.

SIGNALS

    Handling Signals: Consider handling signals like SIGINT (Ctrl+C) and SIGTSTP (Ctrl+Z) to manage job control and background processes effectively.
